/** https://leetcode.cn/problems/minimum-path-sum/ */
/** 递归回溯的方法会超时 */

/** 右下 */
const dx = [0, 1];
const dy = [1, 0];

/**
 * @param {number[][]} grid
 * @return {number}
 */
var minPathSum = function (grid) {
  const results = [];
  /** 1、递归树 */
  _helper(grid, 0, 0, [grid[0][0]], results);
  return Math.min.apply(null, results);
};

var _helper = function (grid, row, column, path, results) {
  /** 2、保存结果: 终止条件 */
  const m = grid.length;
  const n = grid[0].length;
  if (row === m - 1 && column === n - 1) {
    const pathSum = path.reduce((a, b) => a + b);
    if (results.length) {
      if (pathSum < results[0]) results.splice(0, 1, pathSum);
    } else {
      results.push(pathSum);
    }
    return;
  }

  for (let i = 0; i < 2; i += 1) {
    /** 3、选择+递归+重置: 剪枝 */
    const x = row + dx[i];
    const y = column + dy[i];
    const isValid = x >= 0 && x < m && y >= 0 && y < n;
    if (!isValid) continue;
    path.push(grid[x][y]);
    _helper(grid, x, y, [...path], results);
    path.pop();
  }
};

// grid = [
//   [1, 3, 1],
//   [1, 5, 1],
//   [4, 2, 1],
// ];
// grid = [
//   [1, 2, 3],
//   [4, 5, 6],
// ];
// grid = [
//   [7, 1, 3, 5, 8, 9, 9, 2, 1, 9, 0, 8, 3, 1, 6, 6, 9, 5],
//   [9, 5, 9, 4, 0, 4, 8, 8, 9, 5, 7, 3, 6, 6, 6, 9, 1, 6],
//   [8, 2, 9, 1, 3, 1, 9, 7, 2, 5, 3, 1, 2, 4, 8, 2, 8, 8],
//   [6, 7, 9, 8, 4, 8, 3, 0, 4, 0, 9, 6, 6, 0, 0, 5, 1, 4],
//   [7, 1, 3, 1, 8, 8, 3, 1, 2, 1, 5, 0, 2, 1, 9, 1, 1, 4],
//   [9, 5, 4, 3, 5, 6, 1, 3, 6, 4, 9, 7, 0, 8, 0, 3, 9, 9],
//   [1, 4, 2, 5, 8, 7, 7, 0, 0, 7, 1, 2, 1, 2, 7, 7, 7, 4],
//   [3, 9, 7, 9, 5, 8, 9, 5, 6, 9, 8, 8, 0, 1, 4, 2, 8, 2],
//   [1, 5, 2, 2, 2, 5, 6, 3, 9, 3, 1, 7, 9, 6, 8, 6, 8, 3],
//   [5, 7, 8, 3, 8, 8, 3, 9, 9, 8, 1, 9, 2, 5, 4, 7, 7, 7],
//   [2, 3, 2, 4, 8, 5, 1, 7, 2, 9, 5, 2, 4, 2, 9, 2, 8, 7],
//   [0, 1, 6, 1, 1, 0, 0, 6, 5, 4, 3, 4, 3, 7, 9, 6, 1, 9],
// ];
grid = [
  [5, 0, 1, 1, 2, 1, 0, 1, 3, 6, 3, 0, 7, 3, 3, 3, 1],
  [1, 4, 1, 8, 5, 5, 5, 6, 8, 7, 0, 4, 3, 9, 9, 6, 0],
  [2, 8, 3, 3, 1, 6, 1, 4, 9, 0, 9, 2, 3, 3, 3, 8, 4],
  [3, 5, 1, 9, 3, 0, 8, 3, 4, 3, 4, 6, 9, 6, 8, 9, 9],
  [3, 0, 7, 4, 6, 6, 4, 6, 8, 8, 9, 3, 8, 3, 9, 3, 4],
  [8, 8, 6, 8, 3, 3, 1, 7, 9, 3, 3, 9, 2, 4, 3, 5, 1],
  [7, 1, 0, 4, 7, 8, 4, 6, 4, 2, 1, 3, 7, 8, 3, 5, 4],
  [3, 0, 9, 6, 7, 8, 9, 2, 0, 4, 6, 3, 9, 7, 2, 0, 7],
  [8, 0, 8, 2, 6, 4, 4, 0, 9, 3, 8, 4, 0, 4, 7, 0, 4],
  [3, 7, 4, 5, 9, 4, 9, 7, 9, 8, 7, 4, 0, 4, 2, 0, 4],
  [5, 9, 0, 1, 9, 1, 5, 9, 5, 5, 3, 4, 6, 9, 8, 5, 6],
  [5, 7, 2, 4, 4, 4, 2, 1, 8, 4, 8, 0, 5, 4, 7, 4, 7],
  [9, 5, 8, 6, 4, 4, 3, 9, 8, 1, 1, 8, 7, 7, 3, 6, 9],
  [7, 2, 3, 1, 6, 3, 6, 6, 6, 3, 2, 3, 9, 9, 4, 4, 8],
];
console.log(minPathSum(grid));
